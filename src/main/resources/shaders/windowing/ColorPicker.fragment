#version 150 core

in vec3 hsb;

out vec4 o_FragColor;

// todo, use these instead, almost certainly more performant
vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}


void main (){
    vec4 finalColor = vec4(0.0,0.0,0.0,1.0);

    float hue = hsb.x;
    float sat = hsb.y;
    float bri = hsb.z;

    if ( sat == 0.0 ) {
        finalColor = vec4(bri,bri,bri,1.0);
    } else {
        float h = (hue - floor(hue)) * 6.0;
        float f = h - floor(h);
        float p = bri * (1.0 - sat);
        float q = bri * (1.0 - sat * f);
        float t = bri * (1.0 - (sat * (1.0 - f)));

        int hi = int(h);
        if ( hi == 0 ) {
            finalColor.r = bri;
            finalColor.g = t;
            finalColor.b = p;
        } else if ( hi == 1 ) {
            finalColor.r = q;
            finalColor.g = bri;
            finalColor.b = p;
        } else if ( hi == 2 ) {
            finalColor.r = p;
            finalColor.g = bri;
            finalColor.b = t;
        } else if ( hi == 3 ) {
            finalColor.r = p;
            finalColor.g = q;
            finalColor.b = bri;
        } else if ( hi == 4 ) {
            finalColor.r = t;
            finalColor.g = p;
            finalColor.b = bri;
        } else if ( hi == 5 ) {
            finalColor.r = bri;
            finalColor.g = p;
            finalColor.b = q;
        }
    }

    o_FragColor = finalColor;
}


/*
 float h = (hue - (float)Math.floor(hue)) * 6.0f;
             float f = h - (float)java.lang.Math.floor(h);
             float p = brightness * (1.0f - saturation);
             float q = brightness * (1.0f - saturation * f);
             float t = brightness * (1.0f - (saturation * (1.0f - f)));
             switch ((int) h) {
             case 0:
                 r = (int) (brightness * 255.0f + 0.5f);
                 g = (int) (t * 255.0f + 0.5f);
                 b = (int) (p * 255.0f + 0.5f);
                 break;
             case 1:
                 r = (int) (q * 255.0f + 0.5f);
                 g = (int) (brightness * 255.0f + 0.5f);
                 b = (int) (p * 255.0f + 0.5f);
                 break;
             case 2:
                 r = (int) (p * 255.0f + 0.5f);
                 g = (int) (brightness * 255.0f + 0.5f);
                 b = (int) (t * 255.0f + 0.5f);
                 break;
             case 3:
                 r = (int) (p * 255.0f + 0.5f);
                 g = (int) (q * 255.0f + 0.5f);
                 b = (int) (brightness * 255.0f + 0.5f);
                 break;
             case 4:
                 r = (int) (t * 255.0f + 0.5f);
                 g = (int) (p * 255.0f + 0.5f);
                 b = (int) (brightness * 255.0f + 0.5f);
                 break;
             case 5:
                 r = (int) (brightness * 255.0f + 0.5f);
                 g = (int) (p * 255.0f + 0.5f);
                 b = (int) (q * 255.0f + 0.5f);
                 break;
             }
*/